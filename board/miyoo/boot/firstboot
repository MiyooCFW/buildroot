#!/bin/busybox sh

MOUNTDIR=/boot
# expect to be run from /boot, where the boot partition is mounted (readonly)

# create swap
mkswap /dev/mmcblk0p3 | tee -a ${LOG}
swapon /dev/mmcblk0p3 | tee -a ${LOG}

LOG=/dev/null

# high brightness
echo '10' > /sys/devices/platform/backlight/backlight/backlight/brightness

#echo -e "\e[?3c"
echo -e "\e[32m" # green

echo "firstboot script running..." | tee -a ${LOG}
echo

BASEDIR="${MOUNTDIR}"

# action time

# copy over the config files
echo "Copying default configuration files into place..." | tee -a ${LOG}
mount -t vfat -o rw,sync,utf8 /dev/mmcblk0p4 /mnt | tee -a ${LOG}
if test -r "${BASEDIR}/configs/manifest"; then
    cat "${BASEDIR}/configs/manifest" | while read -r LINE; do
        if test "${LINE}" == "${LINE#!}" -a "${LINE}" != "" ; then
            set -- ${LINE}
            # 1               2
            # source_filename target_filename/inside main/
            if test -r "${BASEDIR}/configs/$1"; then
                TO="$2"
                if test "${TO}" == ""; then
                    TO="$1"
                fi
                echo "Copying $1 to /mnt/$TO..." | tee -a ${LOG}
                cp -f "${BASEDIR}/configs/$1" "/mnt/$TO" | tee -a ${LOG}
            fi
        fi
    done
fi

echo

# run a custom script if present - could be used to fix u-boot and such
if test -r "${BASEDIR}/firstboot.custom.sh"; then
    echo "Running a specific firstboot script..." | tee -a ${LOG}
    (cd "${BASEDIR}" && sh firstboot.custom.sh) | tee -a ${LOG}
    echo "Finished running a specific firstboot script." | tee -a ${LOG}
fi


echo " "
sleep 1

LICENSE="
The software provided is offered without \
any warranties or guarantees of any kind, either \
expressed or implied. The use of this software is \
entirely at your own risk. We shall not be held \
responsible for any damages, losses, or adverse \
consequences arising from the use or misuse of this software.
\n\n
\ZuDo you acknowledge and agree to these terms?\Zn
\n\n
   Select an option & press START"

# test if proper video\kbd driver was loaded:
if (dialog --ok-label NO --cancel-label YES --stdout --title "   License agreement" \
--colors --pause "\n              \ZbMiyooCFW\Zn\n$LICENSE" 22 60 5); then
		sync
		sleep 2
		poweroff
fi

mount -o remount,rw "${MOUNTDIR}" | tee -a ${LOG}

# try to read what handheld we're on
if (test -r "${MOUNTDIR}/console.cfg"); then
    source "${MOUNTDIR}/console.cfg"
else 
    export CONSOLE_VARIANT="unknown"
fi

# list of available devices in u-boot Environment parameters read
devices_ID="
bittboy2x_v1
bittboy2x_v2
bittboy3.5
q20
q90
v90
pocketgo
pocketgo_TE
xyc_gc9306
m3_r61520
m3_rm68090
m3_hx8347d
m3_gc9306
"

## Defaulting to "not found the console in string list"
export FOUND_CONSOLE=false

for i in $devices_ID; do
    if test "$i" = "$CONSOLE_VARIANT" ; then
        export FOUND_CONSOLE=true
        break
    fi
done

# Defaulting to console overwriting inactive
export CONSOLE_OVERWRITE=false
# test if no device specified in console.cfg
if ! $FOUND_CONSOLE; then
## Create temp file to store variable for menu choice
TEMP=$(mktemp) 
## show selection menu for ST7789S devices
 if (grep "DETECTED_VERSION=V90/Q90/Q20/PocketGo ST7789S controller" "${MOUNTDIR}/uEnv.txt"); then
  dialog --clear --title "Select your device:" --menu " " 15 40 5 \
    1 "Powkiddy Q20" \
    2 "Powkiddy Q90" \
    3 "Powkiddy V90" \
    4 "PocketGO (default)" \
    5 "PocketGO with TE pin" \
    2> $TEMP
## Defaulting to console overwriting active
  export CONSOLE_OVERWRITE=true
## Read the user's choice from the file
  CHOICE=$(cat $TEMP)
## Perform actions based on the user's choice
  case $CHOICE in
    1)
        dialog --colors --timeout 2 --ok-label " Your device " --msgbox "\Zb\Z1 Powkiddy Q20" 5 18
        echo "CONSOLE_VARIANT=q20" > ${MOUNTDIR}/console.cfg
        ;;
    2)
        dialog --colors --timeout 2 --ok-label " Your device " --msgbox "\Zb\Z1 Powkiddy Q90" 5 18
        echo "CONSOLE_VARIANT=q90" > ${MOUNTDIR}/console.cfg
        ;;
    3)
        dialog --colors --timeout 2 --ok-label " Your device " --msgbox "\Zb\Z1 Powkiddy V90" 5 18
        echo "CONSOLE_VARIANT=v90" > ${MOUNTDIR}/console.cfg
        ;;
    4)
        dialog --colors --timeout 2 --ok-label " Your device " --msgbox "\Zb\Z1 PocketGo" 5 18
        echo "CONSOLE_VARIANT=pocketgo" > ${MOUNTDIR}/console.cfg
        ;;
    5)
        dialog --colors --timeout 2 --ok-label " Your device " --msgbox "\Zb\Z1 PocketGo+TE" 5 18
        echo "CONSOLE_VARIANT=pocketgo_TE" > ${MOUNTDIR}/console.cfg
        ;;
    *)
        echo "Invalid choice. Exiting and selecting default device from autodetection."
		export CONSOLE_OVERWRITE=false
		sleep 2
        ;;
  esac

# Cleanup - delete the temporary file
 rm $TEMP
 fi
fi
mount -o remount,ro "${MOUNTDIR}" | tee -a ${LOG}

# resize the main partition if requested
if ((test -e "${MOUNTDIR}/resize") && (dialog --defaultno --stdout --ok-label YES --cancel-label NO --title "   AUTO-RESIZE" \
    --colors --pause "\n\n       \ZuExpand MAIN partition?\Zn\n\n   Select an option & press START
	\n\n             \ZbWARNING:\Zn\n       After 10s auto-resize\n   of FAT32 partition will begin." 15 60 10)); then
    clear
    echo "Going to resize the MAIN partition." | tee -a ${LOG}
    echo "This can take A LONG TIME, so be patient." | tee -a ${LOG}
    umount /dev/mmcblk0p4 | tee -a ${LOG}
    fsck.fat -y /dev/mmcblk0p4 | tee -a ${LOG}
    fatresize -s max -v -p /dev/mmcblk0p4 -n 4
    fsck.fat -y /dev/mmcblk0p4 | tee -a ${LOG}
    echo -n -e \\xEB\\x58\\x90 > /dev/mmcblk0p4
    sync
    mount -t vfat -o rw,sync,utf8 /dev/mmcblk0p4 /mnt | tee -a ${LOG}
fi

# disable this script
mount -o remount,rw "${MOUNTDIR}" | tee -a ${LOG}
echo "Disabling the firstboot script." | tee -a ${LOG}
mv "${MOUNTDIR}/firstboot" "${MOUNTDIR}/firstboot.done" | tee -a ${LOG}
if test -e "${MOUNTDIR}/resize"; then rm "${MOUNTDIR}/resize"; reboot; fi
mount -o remount,ro "${MOUNTDIR}" | tee -a ${LOG}

echo

sync
echo "firstboot script finished." | tee -a ${LOG}

echo

if test -r "${BASEDIR}/firstboot.custom.sh"; then
echo "please wait a few seconds for shutdown...." | tee -a ${LOG}
umount /dev/mmcblk0p4 | tee -a ${LOG}
#umount /dev/mmcblk0p1 | tee -a ${LOG} # this fails
sleep 3
fi

# REBOOT device if CONSOLE_VARIANT was overwritten from $CHOICE
## so that it could be applied in u-boot by readID
if $CONSOLE_OVERWRITE; then
reboot
fi
