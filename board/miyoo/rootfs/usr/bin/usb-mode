#!/bin/busybox sh

# ARGS
USB_MODE="${1}" # mtp(default); hid; serial; net; host
test "${2}" == "main" \
 && USB_MAIN=true \
 || USB_MAIN=false
echo "USB main run status: ${USB_MAIN}"

# Global variables
SYSDIR=/sys/kernel/config/usb_gadget
DEVDIR=$SYSDIR/g2
MAC_HOST="12:34:56:78:9a:bd"
MAC_DEV="12:34:56:78:9a:bc"
USB_MODE_PATH="/sys/devices/platform/soc/1c13000.usb/musb-hdrc.1.auto/mode"

st_error_func(){
	st -k -e "/bin/sh" "-c" "echo -e \"\e[31m${1}\e[0m\"; sleep 2"
}
st_info_func(){
	st -k -e "/bin/sh" "-c" "echo -e \"${1}\"; sleep 2"
}
st_exec_func(){
	st -k -e "/bin/sh" "-c" "${1}"
}

rm_gadget_func(){
	echo "Removing old gadgets"
	if pgrep "umtprd"; then
		echo "Shutting existing umtprd app"
		killall umtprd
	elif pgrep "umtprd-debug"; then
		echo "Shutting existing umtprd-debug app"
		killall umtprd-debug
	fi
	if (grep -q hid "${HOME}/.usbmode"); then
		echo "Removing gadget HID"
		gadget-vid-pid-remove 0x1d6b:0x0104 # rm gadget-hid (g_multi) - idProduct serial,net
	fi

	if ! test -d $DEVDIR; then
		echo "ERROR: couldn't find ${DEVDIR}"
		return
	fi

	echo '' > $DEVDIR/UDC

	echo "Removing strings from configurations"
	for dir in $DEVDIR/configs/*/strings/*; do
		[ -d $dir ] && rmdir $dir
	done

	echo "Removing functions from configurations"
	for func in $DEVDIR/configs/*.*/*.*; do
		[ -e $func ] && rm $func
	done

	echo "Removing configurations"
	for conf in $DEVDIR/configs/*; do
		[ -d $conf ] && rmdir $conf
	done

	echo "exiting Remove gadget process..."
	return

	# TODO: see why we need to disable below cmds for switching USB mode from HOST (main run) to other
	echo "Removing functions"
	for func in $DEVDIR/functions/*.*; do
		[ -d $func ] && rmdir $func
	done

	echo "Removing strings"
	for str in $DEVDIR/strings/*; do
		[ -d $str ] && rmdir $str
	done

	echo "Removing gadget"
	rmdir $DEVDIR
}

rm_host_modules_func(){
	echo "Removing USB HOST mode's all modules" 
	modprobe -r evdev
	modprobe -r joydev
	modprobe -r analog
	modprobe -r xpad
	modprobe -r atkbd
	modprobe -r uinput
	modprobe -r psmouse
	modprobe -r synaptics_usb
	modprobe -r mousedev
	modprobe -r usbhid
	modprobe -r hid-generic
	modprobe -r hid
}

usb_mode_func(){
	test -z "${1}" \
	 || echo "Suggesting USB mode in ../musb-hdrc.1.auto/mode"
	_usb_mode_="$(cat ${USB_MODE_PATH})"
	echo "Current USB mode=${_usb_mode_}"
	if (grep -Eq 'host|wait_vrise|wait_bcon' "${USB_MODE_PATH}" || grep -q host "${HOME}/.usbmode" && ! test -z "${1}"); then
		rm_host_modules_func
	fi
	test -z "${1}" \
	 || echo "${1}" > ${USB_MODE_PATH} # DOES THIS EVEN WORK?
	sleep 1
	# _usb_mode_="$(cat ${USB_MODE_PATH})"
	# echo "NEW usb_mode=${_usb_mode_}"
}

usb_configs_func(){
	echo "Configuring FunctionFS gadget"
	mount none /sys/kernel/config -t configfs
	mkdir -p ${DEVDIR}
	if ! cd ${DEVDIR}; then
		echo "ERROR: couldn't enter ${DEVDIR}"
		exit 1
	fi
	mkdir -p configs/c.1
	if test "${USB_MODE}" == "mtp"; then
		mkdir -p functions/ffs.mtp # mtp
	elif test "${USB_MODE}" == "serial" || test "${USB_MODE}" == "host"; then
		mkdir -p functions/acm.usb0 # serial
	# else net
	fi
	mkdir -p strings/0x409
	mkdir -p configs/c.1/strings/0x409
	if test "${USB_MODE}" == "net"; then
		mkdir -p functions/rndis.usb0
	fi
	if test "${USB_MODE}" == "mtp"; then
		echo 0x0100 > idProduct # mtp gadget (ptp's extension)
	else
		echo 0x0104 > idProduct # serial,net (g_multi?), CDC ACM
	fi
	echo 0x1D6B > idVendor # Linux Foundation
	if test "${USB_MODE}" == "net"; then
		echo "0x0200" > bcdUSB
		echo "0x02" > bDeviceClass
		echo "0x00" > bDeviceSubClass
		echo "0x3066" > bcdDevice
		echo "1" > os_desc/use
		echo "0xcd" > os_desc/b_vendor_code
		echo "MSFT100" > os_desc/qw_sign
		echo "RNDIS" > functions/rndis.usb0/os_desc/interface.rndis/compatible_id
		echo "5162001" > functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id
		echo $MAC_HOST > functions/rndis.usb0/host_addr
		echo $MAC_DEV > functions/rndis.usb0/dev_addr
	fi
	echo "Miyoo Handheld" > strings/0x409/manufacturer
	echo "MiyooCFW 2.0" > strings/0x409/product
	if test "${USB_MODE}" == "serial" || test "${USB_MODE}" == "host"; then
		echo "deadbeef12345678" > strings/0x409/serialnumber
	fi

	echo "Conf 1" > configs/c.1/strings/0x409/configuration
	echo 120 > configs/c.1/MaxPower
	if test "${USB_MODE}" == "mtp"; then
		# mtp
		ln -s functions/ffs.mtp configs/c.1
		mkdir -p /dev/ffs-mtp
		mount -t functionfs mtp /dev/ffs-mtp
	elif test "${USB_MODE}" == "serial" || test "${USB_MODE}" == "host"; then
		# serial
		ln -s functions/acm.usb0 configs/c.1
	elif test "${USB_MODE}" == "net"; then
		# net
		ln -s functions/rndis.usb0 configs/c.1
		ln -s configs/c.1 os_desc
		sleep 1

		echo "0x00" > bDeviceClass
	else
		echo "ERROR: Unknown USB_MODE=${USB_MODE}"
	fi
}

### MTP/MTD (default) ###
if test "${USB_MODE}" == "mtp"; then
	echo "Starting USB-MTP mode"
	if ! ${USB_MAIN}; then
		rm_gadget_func # omit removing gadgets in main run
		usb_mode_func peripheral
	fi

	usb_configs_func
	# TODO: see why we need to perform MTP setup twice if switching from host mode
	if (grep -Eq 'host|wait_vrise|wait_bcon' "${USB_MODE_PATH}" || grep -q host "${HOME}/.usbmode"); then
		rm_gadget_func
		usb_configs_func
	fi
	if ! ${USB_MAIN}; then
		if ! (pgrep "umtprd" || pgrep "umtprd-debug"); then
			echo "Launching uMTP-Responder app for usb-mtp mode"
			if (grep -q DEBUG_UMTPR\=\1 "${HOME}/options.cfg"); then
				umtprd-debug &
			else
				umtprd &
			fi
		else
			echo "uMTP-Responder in already running in bg for working MTP"
		fi
	fi
	sleep 1
	ls /sys/class/udc/ > ${DEVDIR}/UDC

	usb_mode_func

### HID ###
elif test "${USB_MODE}" == "hid"; then
	echo "Starting USB-HID mode"
	if ! ${USB_MAIN}; then
		rm_gadget_func
		usb_mode_func peripheral
	fi
	modprobe usb_f_hid
	modprobe evdev
	modprobe uinput
	mount none /sys/kernel/config -t configfs
	gadget-hid
	usb_mode_func
	if ! ${USB_MAIN}; then
		st_exec_func "\
			echo -e \"\e[32m\n\n\n\n\n\n               Starting USB-HID mode\e[0m\n\n\n\"; \
			sleep 1; \
			python /usr/bin/usb-hid.py"
	else
		echo -e "\e[32m\n\n\n\n\n\n        Starting USB-HID mode\e[0m\n\n\n" &>$(tty)
		sleep 1
		echo -e "\e[32m\n\n     Press RESET after 5s to exit...\e[0m" &>$(tty)
		python /usr/bin/usb-hid.py
	fi
	modprobe -r usb_f_hid
	modprobe -r evdev
	modprobe -r uinput

### Serial Console ###
elif test "${USB_MODE}" == "serial"; then
	echo "Starting USB-Serial mode"
	if ! ${USB_MAIN}; then
		rm_gadget_func
		usb_mode_func peripheral
	fi
	usb_configs_func
	ls /sys/class/udc/ > ${DEVDIR}/UDC
	usb_mode_func

### Networking ###
elif test "${USB_MODE}" == "net"; then
	echo "Starting USB-Network mode"
	if ! ${USB_MAIN}; then
		rm_gadget_func
		usb_mode_func peripheral
	fi
	modprobe usb_f_rndis
	sleep 1
	usb_configs_func
	ls /sys/class/udc/ > ${DEVDIR}/UDC
	ifconfig usb0 up 192.168.137.1
	sleep 10
	/etc/init.d/S80dhcp-server restart

### Host ##
elif test "${USB_MODE}" == "host"; then
	echo "Starting USB in HOST state mode"
	if ! ${USB_MAIN}; then
		usb_mode_func host
	else
		usb_configs_func # run similary to serial
	fi
	sleep 2

	modprobe evdev
	modprobe joydev
	modprobe analog
	modprobe xpad
	modprobe atkbd
	modprobe uinput
	modprobe psmouse
	modprobe synaptics_usb
	modprobe mousedev
	modprobe usbhid
	modprobe hid-generic
	modprobe hid
	if ! ${USB_MAIN}; then
		usb_mode_func
	else
		sleep 1
		ls /sys/class/udc/ > ${DEVDIR}/UDC
		usb_mode_func host
	fi

### UNKNOWN ##
else
	echo "ERROR: Unknown USB_MODE=${USB_MODE} in 1st arg"
	exit 1
fi

# Export envar & exit successfully app
echo "USB_MODE=${USB_MODE}" > ${HOME}/.usbmode
echo "Finished USB ${USB_MODE} mode configuration..."
